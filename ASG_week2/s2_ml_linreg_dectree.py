# -*- coding: utf-8 -*-
"""S2-ML-LinReg-DecTree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nu-VmIOVoSCMemxBiFZTAHo1uovQ47fK

2402226865 - 
Bagas Aditya Putra

# **Linear Regression**
"""

!wget https://raw.githubusercontent.com/bagasap10/S2-ML/main/ASG_week2/dataset_linear_regression.csv

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import sklearn
from math import sqrt
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
from sklearn import tree
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

dataset1 = pd.read_csv("/content/dataset_linear_regression.csv")
dataset1

dataset1.describe()

x = dataset1['nitrogen_fertilizer(mg)']
y = dataset1['corn_plant_weight(gr)']
n = np.size(x)

x_mean = np.mean(x)
y_mean = np.mean(y)

x_mean,y_mean
  
Sxy = np.sum(x*y)- n*x_mean*y_mean
Sxx = np.sum(x*x)-n*x_mean*x_mean
  
b1 = Sxy/Sxx
b0 = y_mean-b1*x_mean
print('slope b1 is', b1)
print('intercept b0 is', b0)
  
plt.scatter(x,y)
plt.xlabel('Independent variable X')
plt.ylabel('Dependent variable y')

y_pred = b1 * x + b0

plt.scatter(x, y, color = 'red')
plt.plot(x, y_pred, color = 'green')
plt.xlabel('X')
plt.ylabel('y')

"""## a. Find the regression equation best fitted to the data and compute its Mean Squared Error (MSE)!"""

error = y - y_pred
se = np.sum(error**2)
print('squared error is', se)
  
mse = se/n 
print('mean squared error is', mse)
  
rmse = np.sqrt(mse)
print('root mean square error is', rmse)
  
SSt = np.sum((y - y_mean)**2)
R2 = 1- (se/SSt)
print('R square is', R2)

x2 = dataset1['nitrogen_fertilizer(mg)']
x2 = x2.values.reshape(-1,1)

regression_model = LinearRegression()

# Fit the data(train the model)
regression_model.fit(x2, y)

# Predict
y_predicted = regression_model.predict(x2)

# model evaluation
mse=mean_squared_error(y,y_predicted)

rmse = np.sqrt(mean_squared_error(y, y_predicted))
r2 = r2_score(y, y_predicted)

# printing values
print('Slope:' ,regression_model.coef_)
print('Intercept:', regression_model.intercept_)
print('MSE:',mse)
print('Root mean squared error: ', rmse)
print('R2 score: ', r2)

"""## b. Using the equation from question (a), what is the predicted weight of the corn plant if 95 mg of nitrogen fertilizer is used?

"""

y_predict = regression_model.coef_ * 95 + regression_model.intercept_
print(y_predict)

"""# **Decision Tree**"""

!wget https://raw.githubusercontent.com/bagasap10/S2-ML/main/ASG_week2/dataset_decision_tree.csv

dataset2 = pd.read_csv("/content/dataset_decision_tree.csv")
dataset2

fever = {'no': 0, 'average': 1, 'high': 2}
dataset2['fever'] = dataset2['fever'].map(fever)

yes_no = {'no': 0, 'yes': 1}
dataset2['vomiting'] = dataset2['vomiting'].map(yes_no)
dataset2['diarrhea'] = dataset2['diarrhea'].map(yes_no)
dataset2['shivering'] = dataset2['shivering'].map(yes_no)

#classes = {'healthy (H)': 'H'
#           , 'influenza (I)': 'I'
#           , 'salmonella poisoning (S)': 'S'
#           , 'bowel inflammation (B)': 'B'}
#dataset2['class'] = dataset2['class'].map(classes)

print(dataset2)

X = dataset2[["fever", "vomiting","diarrhea","shivering"]]
Y = dataset2["class"]

"""## a. Construct a decision tree using Information Gain (IG) as the main criteria!"""

DST = DecisionTreeClassifier()
DST = DST.fit(X, Y)

tree.plot_tree(DST, feature_names=['fever','vomiting','diarrhea','shivering'])

"""## b. If a person has high fever and diarrhea, does not vomit nor shiver, what diagnosis would probably be given to him?"""

predict = [[2,0,1,0]]
print(DST.predict(predict))